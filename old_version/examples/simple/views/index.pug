doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title #{title}
    link(rel="stylesheet", href="/css/modern-chat.css")
    link(rel="icon", href="/favicon.ico", type="image/x-icon")
    script(src="/htmx/htmx.min.js")
  body
    .container
      header
        .channel-info
          h1.channel-name #{title}
        .user-info
          if user.photoURL
            img.user-avatar(src=user.photoURL, alt=user.displayName)
          else
            .user-avatar-initials(data-initial=user.displayName.charAt(0).toUpperCase()) #{user.displayName.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase()}
          .user-name #{user.displayName}
        .demo-controls
          button.demo-button#toggle-demo-panel(hx-on:click="document.getElementById('demo-panel').classList.toggle('visible')")
            span.demo-icon ‚ö°
            span Demo
          button.reset-button#reset-chat(title="Reset Chat - Removes all messages" hx-post="/api/chat/reset" hx-vals=`{"chatPath": "${chatPath}"}` hx-confirm="Are you sure you want to clear all messages in this chat? This cannot be undone." hx-trigger="click" hx-target="#chat-messages")
            span.reset-icon üóëÔ∏è
            span Reset
      
      main
        #chat-container.chat-container
          #chat-messages.chat-messages(
            hx-get=`/api/messages?chatPath=${chatPath}&loadMore=false` 
            hx-trigger="refreshMessages from:body, every 15s" 
            hx-on="scroll: document.querySelector('#chat-messages').classList.toggle('scrolled', this.scrollTop > 50)"
            hx-on:after-swap="this.scrollTop = this.scrollHeight"
            hx-swap="innerHTML"
            hx-on:load="this.scrollTop = this.scrollHeight"
          )
            // Messages will be inserted here
          
          // Typing indicator with animated dots
          .typing-indicator
            span Demo User is typing
            .typing-dots
              .typing-dot
              .typing-dot
              .typing-dot
          
          // Message form with fixed position at bottom
          .message-form
            form(id="message-form" 
              hx-post="/api/messages" 
              hx-target="#chat-messages" 
              hx-swap="beforeend" 
              hx-trigger="submit" 
              hx-indicator=".form-feedback"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight"
            )
              input(type="hidden" name="chatPath" value=chatPath)
              input(type="hidden" name="userId" value=user.id)
              .input-container
                .input-group
                  input(type="text" name="message" placeholder=`Message #${title}` required id="message-input")
                  .input-controls
                    button.input-action.add-media(type="button" title="Add Media" id="add-media-btn")
                      svg(width="24" height="24" viewBox="0 0 24 24" fill="none")
                        path(d="M12 6V18M18 12H6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
                    button.input-action.primary(type="submit" id="send-message-btn")
                      svg(width="24" height="24" viewBox="0 0 24 24" fill="none")
                        path(d="M2 21L23 12L2 3V10L17 12L2 14V21Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              .form-feedback(hx-swap-oob="true")
            
            // Quick action buttons for simulating interactions from other users
            .quick-actions
              h4.quick-actions-title Simulate Messages From Others
              .quick-action-buttons
                button.quick-action(
                  hx-post="/api/messages" 
                  hx-vals=`{"chatPath": "${chatPath}", "userId": "agent_assistant", "message": "Hello everyone, I'm an AI assistant here to help you with this project. Let me know if you have any questions!", "fromAiAgent": true}`
                  hx-target="#chat-messages"
                  hx-swap="beforeend"
                  hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
                  span.quick-action-icon ü§ñ
                  span AI Assistant
                  
                button.quick-action(
                  hx-post="/api/messages" 
                  hx-vals=`{"chatPath": "${chatPath}", "userId": "user2", "message": "@${user.displayName} I need your input on the design direction.", "recipientIds": ["${user.id}"]}`
                  hx-target="#chat-messages"
                  hx-swap="beforeend"
                  hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
                  span.quick-action-icon üë§
                  span User 2 Message
                  
                button.quick-action(
                  hx-post="/api/messages" 
                  hx-vals=`{
                    "chatPath": "${chatPath}", 
                    "userId": "agent_assistant", 
                    "message": "@${user.displayName} Please fill out this feedback form:", 
                    "fromAiAgent": true, 
                    "recipientIds": ["${user.id}"],
                    "dataRequest": "z.object({rating: z.number().min(1).max(5).required().describe(\\"Rate your experience\\"), comments: z.string().min(10).max(500).describe(\\"Share your thoughts\\"), wouldRecommend: z.boolean().required().describe(\\"Would you recommend us?\\")})"}` 
                  hx-target="#chat-messages"
                  hx-swap="beforeend"
                  hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
                  span.quick-action-icon üìù
                  span Form Request
                  
                button.quick-action(
                  hx-post="/api/messages" 
                  hx-vals=`{
                    "chatPath": "${chatPath}", 
                    "userId": "user2", 
                    "message": "Here are the design mockups:", 
                    "attachments": [
                      {"type": "image", "url": "https://images.unsplash.com/photo-1618424181497-157f25b6ddd5?w=1200&h=900", "title": "Design Mockup 1"},
                      {"type": "image", "url": "https://images.unsplash.com/photo-1517433670267-08bbd4be890f?w=1200&h=900", "title": "Design Mockup 2"},
                      {"type": "image", "url": "https://images.unsplash.com/photo-1618477388954-7852f32655ec?w=1200&h=900", "title": "Design Mockup 3"}
                    ]
                  }`
                  hx-target="#chat-messages"
                  hx-swap="beforeend"
                  hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
                  span.quick-action-icon üñºÔ∏è
                  span Gallery Images
                  
                button.quick-action(
                  hx-post="/api/messages" 
                  hx-vals=`{
                    "chatPath": "${chatPath}", 
                    "userId": "project_manager", 
                    "message": "Check out this helpful tutorial:", 
                    "attachments": [
                      {"type": "youtube", "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ", "title": "Video Tutorial", "thumbnailUrl": "https://img.youtube.com/vi/dQw4w9WgXcQ/hqdefault.jpg"}
                    ]
                  }`
                  hx-target="#chat-messages"
                  hx-swap="beforeend"
                  hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
                  span.quick-action-icon üì∫
                  span YouTube Video
                  
                button.quick-action(
                  hx-post="/api/messages" 
                  hx-vals=`{
                    "chatPath": "${chatPath}", 
                    "userId": "agent_assistant", 
                    "message": "Listen to our latest team update:", 
                    "fromAiAgent": true,
                    "attachments": [
                      {"type": "audio", "url": "https://file-examples.com/storage/fe14eb58c4608145968248c/2017/11/file_example_MP3_700KB.mp3", "title": "Team Update Audio", "mimeType": "audio/mpeg"}
                    ]
                  }`
                  hx-target="#chat-messages"
                  hx-swap="beforeend"
                  hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
                  span.quick-action-icon üîä
                  span Audio Message
            
            // Load messages initially without showing loading indicator
            div(hx-get=`/api/messages?chatPath=${chatPath}&loadMore=false` hx-trigger="load" hx-target="#chat-messages" style="display: none;")
      
      footer
        p HumanAgentChat ¬© 2023

    // Modal for Zod schema forms
    #schema-modal.modal
      .modal-content
        .modal-header
          h3.modal-title Form Title
          button.modal-close &times;
        .modal-body
          #schema-form
        .modal-footer
          button.modal-cancel Cancel
          button.modal-submit Submit
          
    // Modal for adding media
    #media-modal.modal
      .modal-content
        .modal-header
          h3.modal-title Add Media
          button.modal-close &times;
        .modal-body
          .media-tabs
            button.media-tab.active(data-tab="url") URL
            button.media-tab(data-tab="upload") Upload File
          .media-tab-content
            #url-tab.tab-pane.active
              .form-group
                label.form-label(for="media-url") Media URL
                input#media-url.form-input(type="text" placeholder="Enter URL to YouTube, image, or audio file...")
                .form-help URLs ending in .jpg, .png, .gif, .mp3, .wav, or YouTube links
            #upload-tab.tab-pane
              .form-group
                label.form-label(for="media-file") Select a file
                input#media-file.form-input(type="file" accept="image/*,audio/*")
                .form-help Images and audio supported (for demo only - no actual upload in this example)
          .media-preview
            .media-preview-content No media selected
        .modal-footer
          button.modal-cancel Cancel
          button#add-media-button.modal-submit Add to Message
    
    // Demo panel with example messages
    // PhotoSwipe container will be created dynamically
    
    #demo-panel.demo-panel
      .demo-panel-header
        h3.demo-panel-title Message Examples
        button.demo-panel-close(hx-on:click="document.getElementById('demo-panel').classList.remove('visible')") &times;
      .demo-panel-body
        .demo-section
          h4.demo-section-title AI Agent Messages
          .demo-buttons
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{"chatPath": "${chatPath}", "userId": "agent_assistant", "message": "Hello team! I'm the project assistant AI. How can I help you today?", "fromAiAgent": true}`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | Basic AI Message
              
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{"chatPath": "${chatPath}", "userId": "agent_assistant", "message": "I've analyzed the codebase and found 3 potential performance bottlenecks: 1) Unoptimized database queries, 2) Missing React memo usage, 3) Redundant API calls", "fromAiAgent": true}`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | Technical Analysis
              
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{
                "chatPath": "${chatPath}", 
                "userId": "agent_assistant", 
                "message": "I've created a visualization of our system architecture", 
                "fromAiAgent": true,
                "attachments": [
                  {"type": "image", "url": "https://images.unsplash.com/photo-1618424181497-157f25b6ddd5?w=1200&h=900", "title": "System Architecture Diagram"}
                ]
              }`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | AI with Image
        
        .demo-section
          h4.demo-section-title Media Messages
          .demo-buttons
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{
                "chatPath": "${chatPath}", 
                "userId": "user2", 
                "message": "Check out this video on modern UI design", 
                "attachments": [
                  {"type": "youtube", "url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ", "title": "UI Design Tutorial", "thumbnailUrl": "https://img.youtube.com/vi/dQw4w9WgXcQ/hqdefault.jpg"}
                ]
              }`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | YouTube Video
              
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{
                "chatPath": "${chatPath}", 
                "userId": "user2", 
                "message": "Here are some design inspirations I found:", 
                "attachments": [
                  {"type": "image", "url": "https://images.unsplash.com/photo-1481349518771-20055b2a7b24?w=1200&h=900", "title": "Design Inspiration 1"},
                  {"type": "image", "url": "https://images.unsplash.com/photo-1618477388954-7852f32655ec?w=1200&h=900", "title": "Design Inspiration 2"},
                  {"type": "image", "url": "https://images.unsplash.com/photo-1617791160536-598cf32026fb?w=1200&h=900", "title": "Design Inspiration 3"}
                ]
              }`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | Multiple Images
              
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{
                "chatPath": "${chatPath}", 
                "userId": "user2", 
                "message": "I've found the bug! Look at this error message:", 
                "attachments": [
                  {"type": "image", "url": "https://images.unsplash.com/photo-1594322436404-5a0526db4d13?w=1200&h=900", "title": "Error Screenshot"}
                ]
              }`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | Single Image
        
        .demo-section
          h4.demo-section-title Interactive Elements
          .demo-buttons
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{"chatPath": "${chatPath}", "userId": "system", "message": "Project status changed to: ACTIVE"}`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | System Message
              
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{
                "chatPath": "${chatPath}", 
                "userId": "agent_assistant", 
                "message": "@Developer Please fill out this feedback form:", 
                "fromAiAgent": true,
                "dataRequest": "z.object({satisfaction: z.number().min(1).max(5).required().describe(\\"Rate your satisfaction\\"), feedback: z.string().min(10).required().describe(\\"Tell us what you think\\"), wouldRecommend: z.boolean().required().describe(\\"Would you recommend this to others?\\")})"}` 
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | Form Request
              
            button.demo-message-btn(
              hx-post="/api/messages" 
              hx-vals=`{"chatPath": "${chatPath}", "userId": "project_manager", "message": "Team, we completed 5 out of 7 tasks scheduled for today!"}`
              hx-target="#chat-messages"
              hx-swap="beforeend"
              hx-on:after-request="document.querySelector('#chat-messages').scrollTop = document.querySelector('#chat-messages').scrollHeight")
              | Task Completion

    // PhotoSwipe dependencies
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photoswipe@5.3.7/dist/photoswipe.css")
    script(type="module" src="https://cdn.jsdelivr.net/npm/photoswipe@5.3.7/dist/photoswipe.esm.min.js")
    script(type="module").
      // Only include minimal JavaScript for PhotoSwipe lightbox and schema form handling
      document.addEventListener('DOMContentLoaded', () => {
        // Set up media handlers
        setupMediaHandlers();
        
        // Toggle typing indicator for demo purposes
        setupTypingIndicator();
        
        // Quick access functions needed by HTMX events
        window.scrollToBottom = () => {
          const messagesContainer = document.getElementById('chat-messages');
          if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
          }
        };
      });
      
      // Typing indicator animation
      function setupTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator');
        if (!typingIndicator) return;
      
        // Randomly show typing indicator
        setInterval(() => {
          const shouldShow = Math.random() > 0.8; // 20% chance to show
          if (shouldShow) {
            typingIndicator.classList.add('visible');
            setTimeout(() => typingIndicator.classList.remove('visible'), 
              2000 + Math.random() * 3000);
          }
        }, 10000);
      }
      
      // PhotoSwipe integration for media preview
      async function setupMediaHandlers() {
        // Basic delegation for media elements
        document.addEventListener('click', async (e) => {
          // Handle lightbox for images and videos
          if (e.target.closest('.lightbox-trigger') || e.target.closest('.lightbox-image')) {
            // Here you would add PhotoSwipe initialization - the complete implementation
            // is in the original chat-client.js and should be included as needed
          }
        });
      }
      
